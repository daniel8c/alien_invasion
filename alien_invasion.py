import sys
from time import sleep

import pygame

from settings import Settings
from game_stats import GameStats
from scoreboard import Scoreboard
from button import Button
from ship import Ship
from bullet import Bullet
from alien import Alien
from stars import Star


class AlienInvasion:
    """ General class for managing the resources and the way the game works. """

    def __init__(self):
        """ Initializing the game and creating its resources. """
        # Variable that controls iteration.
        self.i = 0

        # Initializing
        pygame.init()
        self.settings = Settings()
        self.stats = GameStats(self)
        self.sb = Scoreboard(self)

        # Variable screen
        self.screen = self.settings.screen

        # ship
        self.ship = Ship(self)

        # Groups
        self.bullets = pygame.sprite.Group()
        self.aliens = pygame.sprite.Group()
        self.stars = pygame.sprite.Group()

        # Create fleet
        self._create_fleet()

        # Create a game button
        self.play_button = Button(self, self.screen, "Play")

    def run_game(self):
        """ Main game loop."""
        while True:
            self.i += 1
            self._check_events()

            self._update_stars()

            if self.stats.game_active:
                self.ship.update()
                self._update_bullets()
                self._update_aliens()
            else:
                self.aliens.empty()
                self.bullets.empty()
                self.ship.center_ship()

            self._update_screen()

    def _check_events(self):
        """ Reaction to events generated by the keyboard and mouse. """
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                self._check_keydown_events(event)
            elif event.type == pygame.KEYUP:
                self._check_keyup_events(event)
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                self._check_play_button(mouse_pos)

    def _check_play_button(self, mouse_pos):
        """ Start a new game when the user clicks Play. """
        button_clicked = self.play_button.rect.collidepoint(mouse_pos)
        if button_clicked and not self.stats.game_active:
            # Reset game settings
            self.settings.initialize_dynamic_settings()
            self.stats.reset_stats()
            self.stats.game_active = True
            self.sb.prep_score()
            self.sb.prep_level()
            self.sb.prep_ships()

            pygame.mouse.set_visible(False)

    def _check_keydown_events(self, event):
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = True
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = True
        elif event.key == pygame.K_q:
            sys.exit()
        elif event.key == pygame.K_SPACE:
            self._fire_bullet()

    def _check_keyup_events(self, event):
        if event.key == pygame.K_RIGHT:
            self.ship.moving_right = False
        elif event.key == pygame.K_LEFT:
            self.ship.moving_left = False

    def _fire_bullet(self):
        """ Create a new bullet and add it to the bullet group. """
        if len(self.bullets) < self.settings.bullets_allowed:
            new_bullet = Bullet(self)
            self.bullets.add(new_bullet)

    def _update_bullets(self):
        """ Updating the position of the bullets and removing the invisible ones. """
        self.bullets.update()

        for bullet in self.bullets.copy():
            if bullet.rect.bottom <= 0:
                self.bullets.remove(bullet)

        self._chceck_bullet_alien_colisions()

    def _chceck_bullet_alien_colisions(self):
        """ Reaction to collisions between bullets and aliens. """
        # Removal of all bullets and aliens that collided.
        colisions = pygame.sprite.groupcollide(self.bullets, self.aliens, True, True)

        if colisions:
            for aliens in colisions.values():
                self.stats.score += self.settings.alien_points * len(aliens)
            self.sb.prep_score()
            self.sb.check_high_score()

        if not self.aliens:
            self.bullets.empty()
            self._create_fleet()
            self.settings.increase_speed()

            self.stats.level += 1
            self.sb.prep_level()

    def _create_fleet(self):
        """ Create a complete aliens fleet. """

        # Determine the number of aliens that fit in a row.
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        avaliable_space_x = self.settings.screen_width - (2 * alien_width)
        number_aliens_x = avaliable_space_x // (2 * alien_width)

        # Determine the number of rows.
        ship_height = self.ship.rect.height
        avaliable_space_y = (self.settings.screen_height - (3 * alien_height)) - ship_height
        number_rows = avaliable_space_y // (2 * alien_height)

        # Create fleet
        for number_row in range(number_rows):
            for alien_number in range(number_aliens_x):
                self._create_alien(alien_number, number_row)

    def _create_alien(self, alien_number, number_rows):
        """ Create an alien and place it the row. """
        alien = Alien(self)
        alien_width, alien_height = alien.rect.size
        alien.x = alien_width + 2 * alien_width * alien_number
        alien.rect.x = alien.x
        alien.y = alien_height + 2 * alien_height * number_rows
        alien.rect.y = alien.y
        self.aliens.add(alien)

    def _update_aliens(self):
        """ Check that the alien fleet is at the edge, then update the location of all aliens in the fleet. """
        self._check_fleet_edges()
        self.aliens.update()

        # Detection of collisions between a ship and an alien.
        if pygame.sprite.spritecollideany(self.ship, self.aliens):
            self._ship_hit()

        self._check_aliens_bottom()

    def _check_fleet_edges(self):
        """ The right reaction when an alien reaches the edge of the screen. """
        for alien in self.aliens.sprites():
            if alien.check_edges():
                self._change_fleet_direction()
                break

    def _change_fleet_direction(self):
        """ Moving the entire fleet down and changing the direction it is moving. """
        for alien in self.aliens.sprites():
            alien.rect.y += self.settings.fleet_drop_speed
        self.settings.fleet_direction *= -1

    def _ship_hit(self):
        """ Reaction an Alien hitting a ship. """

        if self.stats.ships_left > 0:
            self.stats.ships_left -= 1
            self.sb.prep_ships()

            self.aliens.empty()
            self.bullets.empty()

            self._create_fleet()
            self.ship.center_ship()

            sleep(0.5)

        else:
            self.stats.game_active = False
            pygame.mouse.set_visible(True)

    def _check_aliens_bottom(self):
        """ Check if any aliens reached the bottom edge of the screen. """
        screen_rect = self.screen.get_rect()
        for alien in self.aliens.sprites():
            if alien.rect.bottom >= screen_rect.bottom:
                self._ship_hit()
                break

    def _new_star(self):
        """ Create a star. """
        if self.i % self.settings.stars_frequency == 0:
            new_star = Star(self)
            self.stars.add(new_star)

    def _update_stars(self):
        self._new_star()
        self.stars.update()

        for star in self.stars.copy():
            if star.rect.top >= self.settings.screen_height:
                self.stars.remove(star)

    def _update_screen(self):
        """ Updates the images on the screen and goes to a new screen. """

        self.screen.fill(self.settings.bg_color)
        self.stars.draw(self.screen)
        self.ship.blitme()

        for bullet in self.bullets.sprites():
            bullet.draw_bullet()

        self.aliens.draw(self.screen)
        self.sb.show_score()

        if not self.stats.game_active:
            self.play_button.draw_button()

        # Display the last modified screen
        pygame.display.flip()


if __name__ == '__main__':
    # Create a copy of the game and run it.
    ai = AlienInvasion()
    ai.run_game()
